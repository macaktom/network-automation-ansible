---
- name: Setup and Configure FTPS server
  hosts: Server1
  gather_facts: no
  become: yes
  tags: vsftpd
  vars:
    templates_folder: 'templates/{{ vendor }}/{{ dev_type }}'
    vsftpd_conf_path: '/etc/vsftpd.conf'
    vsftpd_userlist_path: '/etc/vsftpduserlist.conf'
    certs_folder_path: '/etc/certs'
  tasks:
    - name: Ensure FTP group exists
      tags: user
      group:
        name: "{{ vsftpd_config.vsftpd_user.name }}"
        state: present

    - name: Create FTP user
      tags: user
      user:
        name: "{{ vsftpd_config.vsftpd_user.name }}"
        state: present
        group: "{{ vsftpd_config.vsftpd_user.name }}"
        groups: "{{ vsftpd_config.vsftpd_user.groups }}"
        shell: /bin/bash
        home: "{{ vsftpd_config.vsftpd_user.home }}"
        password: "{{ vsftpd_config.vsftpd_user.password }}"
        update_password: on_create

    - name: Install VSFTPD
      apt:
        pkg: vsftpd
        state: present

    - name: Enable VSFTPD during boot
      service:
        name: vsftpd
        state: started
        enabled: yes

    - block:
      - name: Create certs directory
        file:
          path: "{{ certs_folder_path }}"
          state: directory
          owner: root
          group: root
          mode: '0755'

      - name: Generate an OpenSSL private key.
        openssl_privatekey:
          path: "{{ vsftpd_config.ssl.private_key_file }}"

      - name: Generate an OpenSSL CSR.
        openssl_csr:
          path: "{{ vsftpd_config.ssl.openssl_csr }}"
          privatekey_path: "{{ vsftpd_config.ssl.private_key_file }}"
          common_name: "{{ vsftpd_config.ssl.cn }}"

      - name: Generate a Self Signed OpenSSL certificate.
        openssl_certificate:
          path: "{{ vsftpd_config.ssl.cert_file }}"
          privatekey_path: "{{ vsftpd_config.ssl.private_key_file }}"
          csr_path: "{{ vsftpd_config.ssl.openssl_csr }}"
          provider: selfsigned
      when: vsftpd_config.ssl is defined and vsftpd_config.ssl.enabled

    - name: Create base FTP directory
      file:
        path: '/home/{{ vsftpd_config.vsftpd_user.name }}/ftp'
        state: directory
        owner: nobody
        group: nogroup
        mode: '0555'

    - name: Create test FTP directory (for ftp users)
      file:
        path: '/home/{{ vsftpd_config.vsftpd_user.name }}/ftp/test'
        state: directory
        owner: '{{ vsftpd_config.vsftpd_user.name }}'
        group: '{{ vsftpd_config.vsftpd_user.name }}'
        mode: '0755'

    - name: Parse vsftpd template
      template:
        src: '{{ templates_folder }}/vsftpd.j2'
        dest: '{{ vsftpd_conf_path }}'
        owner: root
        group: root
        mode: 0644
        force: yes
      notify:
        - restart vsftpd

    - name: Create VSFTPD userlist
      copy:
        dest: '{{ vsftpd_userlist_path }}'
        owner: root
        group: root
        mode: 0644
        force: yes
        content: |
          {{ vsftpd_config.vsftpd_user.name }}
      notify:
        - restart vsftpd

  handlers:
    - name: restart vsftpd
      service:
        name: vsftpd
        state: restarted

- name: Setup TIG Stack
  hosts: ubuntu_servers
  gather_facts: yes
  become: yes
  tags: monitoring
  vars:
    influx_gpg_key_url: 'https://repos.influxdata.com/influxdb.key'
    influx_repository: 'deb https://repos.influxdata.com/ubuntu bionic stable'
    grafana_gpg_key_url: 'https://packages.grafana.com/gpg.key'
    grafana_repository: 'deb https://packages.grafana.com/oss/deb stable main'
    templates_folder: 'templates/{{ vendor }}/{{ dev_type }}'
    telegraf_conf_path: '/etc/telegraf/telegraf.conf'
  tasks:
    - name: Import InfluxDB GPG signing key
      apt_key:
        url: "{{ influx_gpg_key_url }}"
        state: present

    - name: Import Grafana GPG signing key
      apt_key:
        url: "{{ grafana_gpg_key_url }}"
        state: present

    - name: Add InfluxDB repository
      apt_repository:
        repo: "{{ influx_repository }}"
        state: present

    - name: Add Grafana repository
      apt_repository:
        repo: "{{ grafana_repository }}"
        state: present

    - name: Install InfluxDB
      apt:
        pkg: influxdb
        state: present

    - name: Enable InfluxDB during boot
      service:
        name: influxdb
        state: started
        enabled: yes

    - name: Install pip3
      tags: db
      apt:
        name: python3-pip
        state: present

    - name: Install influxdb python package # nutno pro influxdb_database modul
      pip:
        name: influxdb
        state: present

    - name: Create an admin DB user # pro vytvoření DB uživatele je nutný defaultní InfluxDB user (root).
      community.general.influxdb_user:
        user_name: "{{ influxdb_admin_username }}"
        user_password: "{{ influxdb_admin_password }}"
        admin: yes
        hostname: "{{ influxdb_ip_address }}"
        state: present

    - name: Create databases for Nornir and Ansible project
      community.general.influxdb_database:
        hostname: "{{ influxdb_ip_address }}"
        database_name: "{{ item }}"
        state: present
      with_items:
        - "{{ influxdb_ansible_database_name }}"
        - "{{ influxdb_nornir_database_name }}"
        - "{{ influxdb_telegraf_database_name }}"

    - name: Install Grafana
      apt:
        pkg: grafana
        state: present

    - name: Enable Grafana during boot
      service:
        name: grafana-server
        state: started
        enabled: yes

    - name: Install telegraf
      apt:
        name: telegraf
        state: latest

    - name: Enable telegraf agent during boot
      service:
        name: telegraf
        state: started
        enabled: yes

    - name: Parse telegraf template
      template:
        src: '{{ templates_folder }}/telegraf.j2'
        dest: '{{ telegraf_conf_path }}'
        owner: root
        group: root
        mode: 0644
        force: yes
      notify:
        - restart telegraf

    - name: Create influxdb datasources # použítí defaultního Grafana API uživatele (admin)
      community.grafana.grafana_datasource:
        name: "{{ item.name }}"
        grafana_url: "{{ grafana_url }}"
        ds_type: "{{ item.ds_type }}"
        ds_url: "{{ item.url }}"
        database: "{{ item.database }}"
        user: "{{ item.user }}"
        password: "{{ item.password }}"
        state: present
      with_items: "{{ grafana_data_sources }}"

  handlers:
    - name: restart telegraf
      service:
        name: telegraf
        state: restarted